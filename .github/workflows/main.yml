name: AI Service Orchestrator

on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-service]

jobs:
  service-instance:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate unique ID
      id: uid
      run: |
        UUID=$(uuidgen | cut -d'-' -f1)
        echo "instance_id=gemini-$UUID" >> $GITHUB_OUTPUT

    - name: Setup environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Create Python application
      run: |
        curl -o app.py "https://raw.githubusercontent.com/NitinBot001/Gemini/refs/heads/main/app.py"
        mkdir static
        mkdir templates
        curl -o static/context.txt "https://raw.githubusercontent.com/NitinBot001/Unlimitedrdp/refs/heads/main/static/context.txt"
        curl -o requirements.txt "https://raw.githubusercontent.com/NitinBot001/Gemini/refs/heads/main/requirements.txt"
        curl -o templates/index.html "https://raw.githubusercontent.com/NitinBot001/Unlimitedrdp/refs/heads/main/templates/index.html"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || {
          echo "Hash mismatch detected. Updating hashes..."
          pip hash -r requirements.txt > new_requirements.txt
          mv new_requirements.txt requirements.txt
          pip install -r requirements.txt
        }

    - name: Install ngrok
      run: |
        curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
          | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null \
          && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" \
          | sudo tee /etc/apt/sources.list.d/ngrok.list \
          && sudo apt update \
          && sudo apt install ngrok
        ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }} # Set up ngrok authtoken

    - name: Launch service cluster
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        NGROK_EDGE_ID: "edghts_2w04FluTBWJvcaoPT1oOV6HiVaf"  # Replace with your actual edge ID
      run: |
        # Start Flask service in background
        gunicorn -w 4 -b 0.0.0.0:5000 app:app > app.log 2>&1 &
        GUNICORN_PID=$!

        # Start ngrok in background, using the specified edge
        ngrok tunnel --label edge=edghts_2w04FluTBWJvcaoPT1oOV6HiVaf http://localhost:5000 > ngrok.log 2>&1 &
        NGROK_PID=$!

        # Wait for ngrok to establish the tunnel
        sleep 10

        # Attempt to extract the URL from the ngrok log file
        TUNNEL_URL= "https://informed-freely-shiner.ngrok-free.app" #adjust awk print number as necessary
        echo "Tunnel URL: $TUNNEL_URL"
        if [ -z "$TUNNEL_URL" ]; then
          echo "Failed to retrieve ngrok URL from logs. Check ngrok.log for errors."
          exit 1 # Exit the workflow if we can't get the URL.
        fi

        # Create instance.json file
        echo "{ \"tunnel_url\": \"$TUNNEL_URL\" }" > instance.json

        # Commit and push to the repository
        git config --global user.email "github-actions@github.com"
        git config --global user.name "github-actions"

        git clone https://x-access-token:$GH_PAT@github.com/NitinBot001/Gemini.git repo
        cd repo
        mv ../instance.json instance.json
        git add instance.json
        git commit -m "Update tunnel URL to $TUNNEL_URL"
        git push origin main

        # Trigger next instance and wait for confirmation
        TRIGGER_TIME=19800  # 5.5 hours
        sleep $TRIGGER_TIME

        # Trigger new instance
        curl -X POST "https://api.github.com/repos/${{ github.repository }}/dispatches" \
          -H "Authorization: Bearer $GH_PAT" \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -d '{"event_type": "trigger-service"}'

        # Wait briefly to ensure new instance is triggered
        sleep 60

        # Cleanly stop current services
        kill $GUNICORN_PID
        kill $NGROK_PID
        echo "Current cluster stopped after triggering new instance"
